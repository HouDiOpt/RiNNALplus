%%******************************************************************
%% compare the rank of the iterates generated by 
%% RiNNAL_plus with and without using the projected gradient steps.
%%******************************************************************
%% preparation
close all;
clear
lastwarn('');
warning off;
rng('default');
setup_path; 

%% solver
useRiNNAL = 1;
initial_rank_mode = 1; % small:0 large:1

%% pars
probtype = 'BIQ';
MBQPtype = 1; % 0. no strengthen 1. (<=) 2. (=)slack 3. (=) comp
tol = 1e-6;
record = 1;
fname = feval(strcat(['problems_' probtype]))';

%% record results
rrALM   = {"data","n","eq","binary","rank","pobj","dobj","pfeas","dfeas","comp","pdgap","iter","itersub","time","iq",...
    "time_PG","PGiter","SSNiter","SSNCGiter","aveCG"};
rrNAL   = {"data","n","eq","binary","rank","pobj","dobj","pfeas","dfeas","comp","pdgap","iter","itersub","iterA","time","iq"};

%% start test
for k = 1:2
    for i = 31

        %% data
        load(strcat(fname{i},'.mat'),'data');
        Q = data.Q;
        c = data.c;
        A = data.A;
        b = data.b;
        B = [];
        d = [];
        bidx = data.bidx;
        zid  = [];
        [Q,c,A,b,B,d,bidx,zid,n,l,m1,m2,neq,niq] = formulate_MBQP(Q,c,A,b,B,d,bidx,zid,MBQPtype);
        fprintf('\n ===> Start testing %s problems: %s \n',probtype,fname{i});

        %% RiNNAL+
        if useRiNNAL
            %%
            clear par
            par.tol = tol;
            if initial_rank_mode == 0
                r = 2;
            else
                r = 500;
            end
            if k == 1 % not using PG
                par.tune_rank = 1;
                par.useSSN = 0;
            else
                par.SSN_frequence = 1;
            end
            %%
            [obj_ALM,X_ALM,info_ALM] = RiNNAL_plus(Q,c,A,b,B,d,bidx,r,zid,par);
            if k == 1
                rankAD = info_ALM.rankrecord;
            else
                rankPG = info_ALM.rankrecord;
            end
            if record
                nlALM = {fname{i},n,m1,length(bidx),size(X_ALM.R,2),obj_ALM(1),obj_ALM(2),...
                    info_ALM.pfeas,info_ALM.dfeas,info_ALM.comp,info_ALM.pdgap,...
                    info_ALM.ALMite,info_ALM.BBite,info_ALM.ttime,m2,...
                    info_ALM.ttime_PG,info_ALM.PGiterTotal,info_ALM.SSNTotal,info_ALM.CGiterTotal,info_ALM.aveCGiter};
                rrALM = [rrALM;nlALM];
                cname = strcat(pwd,"/results/",probtype,'/',probtype,"-ALM-",string(datetime('now','Format','yyyy-MM-dd--HH-mm-ss')),".mat");
                save(cname,"rrALM");
            end
        end

    end
end

figure;
plot(rankAD, '-*', 'LineWidth', 1.5); hold on;
plot(rankPG, '-o', 'LineWidth', 1.5);
xlabel('Iteration');
ylabel('Rank');
legend('Adaptive', 'PG', 'Location', 'best');
%title('Comparison of Rank Changes: Adaptive vs. PG');
grid on;
if initial_rank_mode == 0
    epstitle = 'rank_comparison_increase';
else
    epstitle = 'rank_comparison_decrease';
end
print(epstitle, '-depsc');


%%
function [Q,c,A,b,B,d,bidx,zid,n,l,m1,m2,neq,niq] = formulate_MBQP(Q,c,A,b,B,d,bidx,zid,type)

m1 = size(A,1);
m2 = size(B,1);
n  = size(Q,1);
l  = length(bidx);

if m2 ~= 0
    error('\n Have inequality constraint, rewrite formulation function!');
elseif l == 0
    error('\n No binary constraint, rewrite formulation function!')
end

eyeid = eye(n);
eyeid = eyeid(bidx,:);

if type == 0

elseif type == 1
    B = eyeid;
    d = [ones(l,1)];
elseif type == 2
    Q = [Q,zeros(n,l);zeros(l,n+l)];
    c = [c;zeros(l,1)];
    A = [A,zeros(m1,l);eyeid,eye(l)];
    b = [b;ones(l,1)];
    G = zeros(n+1,n+1);
    G(zid) = 1;
    G = [G,zeros(n+1,l);zeros(l,n+l+1)];
    zid = find(G);
elseif type == 3
    Q = [Q,zeros(n,l);zeros(l,n+l)];
    c = [c;zeros(l,1)];
    A = [A,zeros(m1,l);eyeid,eye(l)];
    b = [b;ones(l,1)];
    bidx = [];
    G = zeros(n+1,n+1);
    G(zid) = 1;
    G = [G,[zeros(1,l);eyeid'];zeros(l,1),eyeid,zeros(l,l)];
    zid = find(G);
end

m1 = size(A,1);
m2 = size(B,1);
n = size(Q,1);
l = length(bidx);
neq = m1+m1*n+l+1;
niq = m2*(2*n+m2+1)/2;

if nnz(Q)/numel(Q) <= 0.5
    Q = sparse(Q);
end
if nnz(A)/numel(A) <= 0.5
    A = sparse(A);
end
if nnz(B)/numel(B) <= 0.5
    B = sparse(B);
end

end